name: Value-First CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # High-Value Tests (Blocking)
  high-value-tests:
    name: High-Value Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python (Backend)
      if: matrix.test-type == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js (Frontend)
      if: matrix.test-type == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      if: matrix.test-type == 'backend'
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      if: matrix.test-type == 'frontend'
      run: |
        cd frontend
        npm ci
    
    - name: Run high-value backend tests
      if: matrix.test-type == 'backend'
      run: |
        cd backend
        pytest tests/unit/ -v --tb=short
        # Only run high-value tests, exclude archived tests
    
    - name: Run high-value frontend tests
      if: matrix.test-type == 'frontend'
      run: |
        cd frontend
        npm test -- --testPathIgnorePatterns=tests_archive --passWithNoTests
    
    - name: Type checking (Backend)
      if: matrix.test-type == 'backend'
      run: |
        cd backend
        mypy core/ --strict
    
    - name: Type checking (Frontend)
      if: matrix.test-type == 'frontend'
      run: |
        cd frontend
        npm run type-check
    
    - name: Linting (Backend)
      if: matrix.test-type == 'backend'
      run: |
        cd backend
        ruff check core/ --fix
    
    - name: Linting (Frontend)
      if: matrix.test-type == 'frontend'
      run: |
        cd frontend
        npm run lint -- --fix

  # Security Scan (Blocking)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Security scan (Backend)
      run: |
        cd backend
        bandit -r core/ -f json -o bandit-report.json
        safety check
    
    - name: Security scan (Frontend)
      run: |
        cd frontend
        npm audit --audit-level=high

  # Coverage Report (Warning Only)
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        cd ../frontend
        npm ci
    
    - name: Generate coverage report (Backend)
      run: |
        cd backend
        pytest --cov=core --cov-report=html --cov-report=xml
        # Generate coverage report but don't block on coverage %
    
    - name: Generate coverage report (Frontend)
      run: |
        cd frontend
        npm test -- --coverage --testPathIgnorePatterns=tests_archive
        # Generate coverage report but don't block on coverage %
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          backend/htmlcov/
          frontend/coverage/

  # Performance Benchmarks (Warning Only)
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        cd backend
        pytest --benchmark-only tests/unit/ || true
        # Run benchmarks but don't block on performance
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: backend/.benchmarks/

  # E2E Tests (Critical User Journeys Only)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright
      run: |
        cd frontend
        npx playwright install --with-deps
    
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e
        # Only run critical user journey tests
    
    - name: Upload E2E results
      uses: actions/upload-artifact@v3
      with:
        name: e2e-results
        path: frontend/test-results/

  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [high-value-tests, security-scan]
    if: always()
    
    steps:
    - name: Check quality gate
      run: |
        echo "Quality Gate Status:"
        echo "- High-value tests: ${{ needs.high-value-tests.result }}"
        echo "- Security scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.high-value-tests.result }}" != "success" ]]; then
          echo "❌ High-value tests failed - blocking merge"
          exit 1
        fi
        
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "❌ Security scan failed - blocking merge"
          exit 1
        fi
        
        echo "✅ Quality gate passed - ready for merge"