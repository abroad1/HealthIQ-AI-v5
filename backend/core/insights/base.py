"""
Base insight classes - abstract base for biomarker insights.
"""

from abc import ABC, abstractmethod
from typing import List, Dict, Any

from core.models.context import AnalysisContext
from core.models.biomarker import BiomarkerInsight


class BaseInsight(ABC):
    """Abstract base class for biomarker insights."""
    
    @abstractmethod
    def get_required_biomarkers(self) -> List[str]:
        """
        Get list of canonical biomarker names required for this insight.
        
        Returns:
            List of canonical biomarker names
        """
        pass
    
    @abstractmethod
    def analyze(self, context: AnalysisContext) -> List[BiomarkerInsight]:
        """
        Analyze the context and generate insights.
        
        Args:
            context: Analysis context with user and biomarker data
            
        Returns:
            List of generated insights
        """
        pass
    
    def get_insight_name(self) -> str:
        """
        Get the name of this insight generator.
        
        Returns:
            Insight generator name
        """
        return self.__class__.__name__
    
    def get_insight_category(self) -> str:
        """
        Get the category of insights generated by this class.
        
        Returns:
            Insight category
        """
        return "general"
    
    def can_analyze(self, context: AnalysisContext) -> bool:
        """
        Check if this insight can analyze the given context.
        
        Args:
            context: Analysis context to check
            
        Returns:
            True if analysis is possible, False otherwise
        """
        required_biomarkers = self.get_required_biomarkers()
        available_biomarkers = set(context.biomarker_panel.biomarkers.keys())
        
        # Check if all required biomarkers are available
        return all(biomarker in available_biomarkers for biomarker in required_biomarkers)
