"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/results/page",{

/***/ "(app-pages-browser)/./app/state/analysisStore.ts":
/*!************************************!*\
  !*** ./app/state/analysisStore.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAnalysisStore: function() { return /* binding */ useAnalysisStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var _services_analysis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/analysis */ \"(app-pages-browser)/./app/services/analysis.ts\");\n\n\n\nconst useAnalysisStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_2__.devtools)((set, get)=>({\n        // Initial state\n        currentAnalysis: null,\n        currentAnalysisId: null,\n        analysisHistory: [],\n        isLoading: false,\n        error: null,\n        currentPhase: \"idle\",\n        progress: 0,\n        rawBiomarkers: {},\n        normalizedBiomarkers: {},\n        unmappedBiomarkers: [],\n        userProfile: null,\n        questionnaireResponses: {},\n        questionnaireCompleted: false,\n        eventSource: null,\n        // Basic setters\n        setCurrentAnalysis: (analysis)=>set({\n                currentAnalysis: analysis\n            }),\n        setCurrentAnalysisId: (analysisId)=>set({\n                currentAnalysisId: analysisId\n            }),\n        addToHistory: (analysis)=>set((state)=>({\n                    analysisHistory: [\n                        analysis,\n                        ...state.analysisHistory.slice(0, 49)\n                    ] // Keep last 50\n                })),\n        setLoading: (loading)=>set({\n                isLoading: loading\n            }),\n        setError: (error)=>set({\n                error\n            }),\n        setPhase: (phase)=>set({\n                currentPhase: phase\n            }),\n        setProgress: (progress)=>set({\n                progress: Math.max(0, Math.min(100, progress))\n            }),\n        setRawBiomarkers: (biomarkers)=>set({\n                rawBiomarkers: biomarkers\n            }),\n        setNormalizedBiomarkers: (biomarkers)=>set({\n                normalizedBiomarkers: biomarkers\n            }),\n        setUnmappedBiomarkers: (unmapped)=>set({\n                unmappedBiomarkers: unmapped\n            }),\n        setUserProfile: (profile)=>set({\n                userProfile: profile\n            }),\n        setQuestionnaireResponses: (responses)=>set({\n                questionnaireResponses: responses\n            }),\n        setQuestionnaireCompleted: (completed)=>set({\n                questionnaireCompleted: completed\n            }),\n        // Questionnaire actions\n        setResponse: (id, value)=>set((state)=>({\n                    questionnaireResponses: {\n                        ...state.questionnaireResponses,\n                        [id]: value\n                    }\n                })),\n        getResponse: (id)=>{\n            const state = get();\n            return state.questionnaireResponses[id];\n        },\n        resetResponses: ()=>set({\n                questionnaireResponses: {}\n            }),\n        // Complex actions\n        startAnalysis: async (request)=>{\n            // Validate input data\n            const biomarkerValidation = _services_analysis__WEBPACK_IMPORTED_MODULE_0__.AnalysisService.validateBiomarkerData(request.biomarkers);\n            const userValidation = _services_analysis__WEBPACK_IMPORTED_MODULE_0__.AnalysisService.validateUserProfile(request.user);\n            if (!biomarkerValidation.valid || !userValidation.valid) {\n                const errors = [\n                    ...biomarkerValidation.errors,\n                    ...userValidation.errors\n                ];\n                set({\n                    error: {\n                        message: \"Validation failed: \".concat(errors.join(\", \")),\n                        code: \"VALIDATION_ERROR\",\n                        details: {\n                            biomarkerErrors: biomarkerValidation.errors,\n                            userErrors: userValidation.errors\n                        }\n                    },\n                    isLoading: false,\n                    currentPhase: \"idle\"\n                });\n                return;\n            }\n            set({\n                isLoading: true,\n                error: null,\n                currentPhase: \"ingestion\",\n                progress: 0,\n                rawBiomarkers: request.biomarkers,\n                userProfile: request.user,\n                questionnaireResponses: request.questionnaire || {}\n            });\n            try {\n                // Call the API service\n                const response = await _services_analysis__WEBPACK_IMPORTED_MODULE_0__.AnalysisService.startAnalysis(request);\n                if (!response.success) {\n                    throw new Error(response.error || \"Failed to start analysis\");\n                }\n                const analysisId = response.data.analysis_id;\n                const analysis = {\n                    analysis_id: analysisId,\n                    status: \"pending\",\n                    progress: 0,\n                    created_at: new Date().toISOString()\n                };\n                set({\n                    currentAnalysis: analysis,\n                    currentAnalysisId: analysisId,\n                    isLoading: false,\n                    error: null,\n                    currentPhase: \"ingestion\",\n                    progress: 0\n                });\n                // Add to history\n                get().addToHistory(analysis);\n                // Start listening to SSE events\n                const eventSource = _services_analysis__WEBPACK_IMPORTED_MODULE_0__.AnalysisService.subscribeToAnalysisEvents(analysisId, (event)=>{\n                    try {\n                        const data = JSON.parse(event.data);\n                        console.log(\"SSE Event received:\", data);\n                        // Handle analysis_status events\n                        if (data.phase && typeof data.progress === \"number\") {\n                            get().updateAnalysisProgress(analysisId, data.progress, data.phase);\n                            // Check if this is a completion event\n                            if (data.phase === \"complete\") {\n                                get().completeAnalysis(analysisId, data.results);\n                            }\n                        } else if (data.type === \"complete\" || data.phase === \"complete\") {\n                            get().completeAnalysis(analysisId, data.results);\n                        } else if (data.type === \"error\" || data.error) {\n                            get().failAnalysis(analysisId, {\n                                message: data.message || data.error || \"Analysis failed\",\n                                code: data.code || \"ANALYSIS_ERROR\",\n                                details: data.details\n                            });\n                        }\n                    } catch (error) {\n                        console.error(\"Failed to parse SSE event:\", error);\n                    }\n                }, (error)=>{\n                    console.error(\"SSE connection error:\", error);\n                    // Only fail if analysis hasn't completed\n                    const state = get();\n                    if (state.currentPhase !== \"completed\") {\n                        get().failAnalysis(analysisId, {\n                            message: \"Connection lost during analysis\",\n                            code: \"CONNECTION_ERROR\",\n                            details: error\n                        });\n                    } else {\n                        console.log(\"SSE error after completion - ignoring\");\n                    }\n                }, ()=>{\n                    console.log(\"Analysis completed via SSE\");\n                    get().completeAnalysis(analysisId, null);\n                });\n                // Store event source for cleanup\n                set({\n                    eventSource\n                });\n            } catch (error) {\n                set({\n                    error: {\n                        message: error instanceof Error ? error.message : \"Failed to start analysis\",\n                        code: \"API_ERROR\",\n                        details: error\n                    },\n                    isLoading: false,\n                    currentPhase: \"idle\"\n                });\n            }\n        },\n        updateAnalysisProgress: (analysisId, progress, phase)=>{\n            var _state_currentAnalysis;\n            const state = get();\n            if (((_state_currentAnalysis = state.currentAnalysis) === null || _state_currentAnalysis === void 0 ? void 0 : _state_currentAnalysis.analysis_id) === analysisId) {\n                set({\n                    currentAnalysis: {\n                        ...state.currentAnalysis,\n                        status: \"processing\",\n                        progress\n                    },\n                    progress,\n                    currentPhase: phase\n                });\n            }\n        },\n        completeAnalysis: async (analysisId, results)=>{\n            var _state_currentAnalysis;\n            const state = get();\n            if (((_state_currentAnalysis = state.currentAnalysis) === null || _state_currentAnalysis === void 0 ? void 0 : _state_currentAnalysis.analysis_id) === analysisId) {\n                try {\n                    // Fetch the full analysis results from the API\n                    const response = await _services_analysis__WEBPACK_IMPORTED_MODULE_0__.AnalysisService.getAnalysisResult(analysisId);\n                    if (response && response.success && response.data) {\n                        const completedAnalysis = {\n                            ...state.currentAnalysis,\n                            ...response.data,\n                            completed_at: new Date().toISOString()\n                        };\n                        set({\n                            currentAnalysis: completedAnalysis,\n                            isLoading: false,\n                            currentPhase: \"completed\",\n                            progress: 100,\n                            error: null\n                        });\n                        // Update in history\n                        get().addToHistory(completedAnalysis);\n                    } else {\n                        // Fallback to the results passed in (if any)\n                        const completedAnalysis = {\n                            ...state.currentAnalysis,\n                            status: \"completed\",\n                            progress: 100,\n                            results: results || {\n                                biomarkers: [],\n                                clusters: [],\n                                insights: [],\n                                risk_assessment: {},\n                                recommendations: []\n                            },\n                            completed_at: new Date().toISOString()\n                        };\n                        set({\n                            currentAnalysis: completedAnalysis,\n                            isLoading: false,\n                            currentPhase: \"completed\",\n                            progress: 100,\n                            error: null\n                        });\n                        // Update in history\n                        get().addToHistory(completedAnalysis);\n                    }\n                } catch (error) {\n                    console.error(\"Failed to fetch analysis results:\", error);\n                    // Fallback to the results passed in (if any)\n                    const completedAnalysis = {\n                        ...state.currentAnalysis,\n                        status: \"completed\",\n                        progress: 100,\n                        results: results || {\n                            biomarkers: [],\n                            clusters: [],\n                            insights: [],\n                            risk_assessment: {},\n                            recommendations: []\n                        },\n                        completed_at: new Date().toISOString()\n                    };\n                    set({\n                        currentAnalysis: completedAnalysis,\n                        isLoading: false,\n                        currentPhase: \"completed\",\n                        progress: 100,\n                        error: null\n                    });\n                    // Update in history\n                    get().addToHistory(completedAnalysis);\n                }\n            } else {\n                // If no current analysis, just update the phase and progress\n                set({\n                    isLoading: false,\n                    currentPhase: \"completed\",\n                    progress: 100,\n                    error: null\n                });\n            }\n        },\n        failAnalysis: (analysisId, error)=>{\n            var _state_currentAnalysis;\n            const state = get();\n            if (((_state_currentAnalysis = state.currentAnalysis) === null || _state_currentAnalysis === void 0 ? void 0 : _state_currentAnalysis.analysis_id) === analysisId) {\n                const failedAnalysis = {\n                    ...state.currentAnalysis,\n                    status: \"failed\",\n                    completed_at: new Date().toISOString()\n                };\n                set({\n                    currentAnalysis: failedAnalysis,\n                    isLoading: false,\n                    currentPhase: \"error\",\n                    error\n                });\n                // Update in history\n                get().addToHistory(failedAnalysis);\n            } else {\n                // If no current analysis, just update the phase and error\n                set({\n                    isLoading: false,\n                    currentPhase: \"error\",\n                    error\n                });\n            }\n        },\n        clearAnalysis: ()=>{\n            // Close any active SSE connection\n            const state = get();\n            if (state.eventSource) {\n                state.eventSource.close();\n            }\n            set({\n                currentAnalysis: null,\n                currentAnalysisId: null,\n                isLoading: false,\n                error: null,\n                currentPhase: \"idle\",\n                progress: 0,\n                rawBiomarkers: {},\n                normalizedBiomarkers: {},\n                unmappedBiomarkers: [],\n                questionnaireResponses: {},\n                questionnaireCompleted: false,\n                eventSource: null\n            });\n        },\n        retryAnalysis: ()=>{\n            const state = get();\n            if (state.currentAnalysis && state.userProfile) {\n                const request = {\n                    biomarkers: state.rawBiomarkers,\n                    user: state.userProfile,\n                    questionnaire: state.questionnaireResponses\n                };\n                get().startAnalysis(request);\n            }\n        },\n        // Utility functions\n        getAnalysisById: (analysisId)=>{\n            const state = get();\n            return state.analysisHistory.find((analysis)=>analysis.analysis_id === analysisId);\n        },\n        getRecentAnalyses: function() {\n            let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n            const state = get();\n            return state.analysisHistory.slice(0, limit);\n        },\n        isAnalysisComplete: ()=>{\n            var _state_currentAnalysis;\n            const state = get();\n            return ((_state_currentAnalysis = state.currentAnalysis) === null || _state_currentAnalysis === void 0 ? void 0 : _state_currentAnalysis.status) === \"completed\";\n        },\n        getAnalysisSummary: ()=>{\n            const state = get();\n            const analyses = state.analysisHistory;\n            const completed = analyses.filter((a)=>a.status === \"completed\");\n            const failed = analyses.filter((a)=>a.status === \"failed\");\n            const scores = completed.map((a)=>{\n                var _a_results;\n                return (_a_results = a.results) === null || _a_results === void 0 ? void 0 : _a_results.overall_score;\n            }).filter((score)=>typeof score === \"number\");\n            return {\n                totalAnalyses: analyses.length,\n                completedAnalyses: completed.length,\n                failedAnalyses: failed.length,\n                averageScore: scores.length > 0 ? scores.reduce((a, b)=>a + b, 0) / scores.length : 0\n            };\n        }\n    }), {\n    name: \"analysis-store\"\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/state/analysisStore.ts\n"));

/***/ })

});