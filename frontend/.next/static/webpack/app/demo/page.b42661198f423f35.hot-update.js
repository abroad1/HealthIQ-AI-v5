"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/demo/page",{

/***/ "(app-pages-browser)/./app/state/uiStore.ts":
/*!******************************!*\
  !*** ./app/state/uiStore.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useUIStore: function() { return /* binding */ useUIStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n\n\nconst defaultPreferences = {\n    theme: \"system\",\n    language: \"en\",\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    dateFormat: \"MM/DD/YYYY\",\n    timeFormat: \"12h\",\n    notifications: {\n        email: true,\n        push: true,\n        analysis: true,\n        alerts: true\n    },\n    accessibility: {\n        highContrast: false,\n        reducedMotion: false,\n        fontSize: \"medium\"\n    }\n};\nconst useUIStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.devtools)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set, get)=>({\n        // Initial state\n        layout: {\n            sidebarOpen: false,\n            headerHeight: 64,\n            footerHeight: 48\n        },\n        sidebarOpen: false,\n        sidebarCollapsed: false,\n        headerHeight: 64,\n        footerHeight: 48,\n        theme: \"dark\",\n        systemTheme: \"light\",\n        actualTheme: \"dark\",\n        viewport: {\n            width:  true ? window.innerWidth : 0,\n            height:  true ? window.innerHeight : 0,\n            isMobile: false,\n            isTablet: false,\n            isDesktop: true\n        },\n        preferences: defaultPreferences,\n        notifications: [],\n        unreadCount: 0,\n        modals: [],\n        toasts: [],\n        globalLoading: false,\n        loadingStates: {},\n        loading: {},\n        globalError: null,\n        errorStates: {},\n        errors: {},\n        currentStep: 1,\n        totalSteps: 1,\n        progress: 0,\n        // Layout actions\n        setSidebarOpen: (open)=>set((state)=>({\n                    sidebarOpen: open,\n                    layout: {\n                        ...state.layout,\n                        sidebarOpen: open\n                    }\n                })),\n        toggleSidebar: ()=>set((state)=>({\n                    sidebarOpen: !state.sidebarOpen,\n                    layout: {\n                        ...state.layout,\n                        sidebarOpen: !state.sidebarOpen\n                    }\n                })),\n        setSidebarCollapsed: (collapsed)=>set({\n                sidebarCollapsed: collapsed\n            }),\n        setHeaderHeight: (height)=>set({\n                headerHeight: height\n            }),\n        setFooterHeight: (height)=>set({\n                footerHeight: height\n            }),\n        // Theme actions\n        setTheme: (theme)=>{\n            const state = get();\n            const actualTheme = theme === \"system\" ? state.systemTheme : theme;\n            set({\n                theme,\n                actualTheme\n            });\n        },\n        toggleTheme: ()=>{\n            const state = get();\n            const newTheme = state.actualTheme === \"light\" ? \"dark\" : \"light\";\n            set({\n                theme: newTheme,\n                actualTheme: newTheme\n            });\n        },\n        setSystemTheme: (theme)=>{\n            const state = get();\n            const actualTheme = state.theme === \"system\" ? theme : state.actualTheme;\n            set({\n                systemTheme: theme,\n                actualTheme\n            });\n        },\n        // Viewport actions\n        setViewport: (viewport)=>set({\n                viewport\n            }),\n        updateViewport: (updates)=>set((state)=>({\n                    viewport: {\n                        ...state.viewport,\n                        ...updates\n                    }\n                })),\n        // Preferences actions\n        setPreferences: (updates)=>set((state)=>{\n                const newPreferences = {\n                    ...state.preferences,\n                    ...updates\n                };\n                // Remove theme from preferences if it's being set separately\n                if (updates.theme !== undefined) {\n                    delete newPreferences.theme;\n                }\n                return {\n                    preferences: newPreferences\n                };\n            }),\n        resetPreferences: ()=>set({\n                preferences: defaultPreferences\n            }),\n        // Notification actions\n        addNotification: (notification)=>{\n            const id = \"notification_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n            const newNotification = {\n                ...notification,\n                id,\n                created_at: new Date().toISOString(),\n                read: false\n            };\n            set((state)=>({\n                    notifications: [\n                        newNotification,\n                        ...state.notifications\n                    ],\n                    unreadCount: state.unreadCount + 1\n                }));\n        },\n        removeNotification: (id)=>set((state)=>{\n                const notification = state.notifications.find((n)=>n.id === id);\n                const wasUnread = notification && !notification.read;\n                return {\n                    notifications: state.notifications.filter((n)=>n.id !== id),\n                    unreadCount: wasUnread ? state.unreadCount - 1 : state.unreadCount\n                };\n            }),\n        markNotificationRead: (id)=>set((state)=>{\n                const notification = state.notifications.find((n)=>n.id === id);\n                if (notification && !notification.read) {\n                    return {\n                        notifications: state.notifications.map((n)=>n.id === id ? {\n                                ...n,\n                                read: true\n                            } : n),\n                        unreadCount: state.unreadCount - 1\n                    };\n                }\n                return state;\n            }),\n        markAllNotificationsRead: ()=>set((state)=>({\n                    notifications: state.notifications.map((n)=>({\n                            ...n,\n                            read: true\n                        })),\n                    unreadCount: 0\n                })),\n        clearNotifications: ()=>set({\n                notifications: [],\n                unreadCount: 0\n            }),\n        // Modal actions\n        openModal: (modal)=>{\n            const id = \"modal_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n            const newModal = {\n                ...modal,\n                id\n            };\n            set((state)=>({\n                    modals: [\n                        ...state.modals,\n                        newModal\n                    ]\n                }));\n            return id;\n        },\n        closeModal: (id)=>set((state)=>({\n                    modals: state.modals.filter((m)=>m.id !== id)\n                })),\n        closeAllModals: ()=>set({\n                modals: []\n            }),\n        // Toast actions\n        addToast: (toast)=>{\n            const id = \"toast_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n            const newToast = {\n                ...toast,\n                id\n            };\n            set((state)=>({\n                    toasts: [\n                        ...state.toasts,\n                        newToast\n                    ]\n                }));\n            // Auto-remove toast after duration\n            if (toast.duration > 0) {\n                setTimeout(()=>{\n                    get().removeToast(id);\n                }, toast.duration);\n            }\n            return id;\n        },\n        removeToast: (id)=>set((state)=>({\n                    toasts: state.toasts.filter((t)=>t.id !== id)\n                })),\n        clearToasts: ()=>set({\n                toasts: []\n            }),\n        // Loading actions\n        setGlobalLoading: (loading)=>set({\n                globalLoading: loading\n            }),\n        setLoading: (key, loading)=>set((state)=>({\n                    loadingStates: {\n                        ...state.loadingStates,\n                        [key]: loading\n                    },\n                    loading: {\n                        ...state.loading,\n                        [key]: loading\n                    }\n                })),\n        isLoading: (key)=>{\n            const state = get();\n            if (key) {\n                return state.loadingStates[key] || false;\n            }\n            return state.globalLoading || Object.values(state.loadingStates).some((loading)=>loading);\n        },\n        // Error actions\n        setGlobalError: (error)=>set({\n                globalError: error\n            }),\n        setError: (key, error)=>set((state)=>({\n                    errorStates: {\n                        ...state.errorStates,\n                        [key]: error\n                    },\n                    errors: {\n                        ...state.errors,\n                        [key]: error\n                    }\n                })),\n        clearError: (key)=>{\n            if (key) {\n                set((state)=>({\n                        errorStates: {\n                            ...state.errorStates,\n                            [key]: null\n                        },\n                        errors: {\n                            ...state.errors,\n                            [key]: null\n                        }\n                    }));\n            } else {\n                set({\n                    globalError: null,\n                    errorStates: {},\n                    errors: {}\n                });\n            }\n        },\n        clearLoading: (key)=>set((state)=>({\n                    loadingStates: {\n                        ...state.loadingStates,\n                        [key]: false\n                    },\n                    loading: {\n                        ...state.loading,\n                        [key]: false\n                    }\n                })),\n        clearAllErrors: ()=>set({\n                globalError: null,\n                errorStates: {},\n                errors: {}\n            }),\n        // Questionnaire navigation actions\n        setCurrentStep: (step)=>{\n            const state = get();\n            const progress = state.totalSteps > 0 ? step / state.totalSteps * 100 : 0;\n            set({\n                currentStep: step,\n                progress\n            });\n        },\n        setTotalSteps: (steps)=>{\n            const state = get();\n            const progress = steps > 0 ? state.currentStep / steps * 100 : 0;\n            set({\n                totalSteps: steps,\n                progress\n            });\n        },\n        nextStep: ()=>{\n            const state = get();\n            if (state.currentStep < state.totalSteps) {\n                get().setCurrentStep(state.currentStep + 1);\n            }\n        },\n        prevStep: ()=>{\n            const state = get();\n            if (state.currentStep > 1) {\n                get().setCurrentStep(state.currentStep - 1);\n            }\n        },\n        resetSteps: ()=>set({\n                currentStep: 1,\n                totalSteps: 1,\n                progress: 0\n            }),\n        updateLayout: (layout)=>set((state)=>({\n                    layout: {\n                        ...state.layout,\n                        ...layout\n                    }\n                })),\n        updatePreferences: (preferences)=>set((state)=>({\n                    preferences: {\n                        ...state.preferences,\n                        ...preferences\n                    }\n                })),\n        showToast: (toast)=>{\n            return get().addToast(toast);\n        },\n        hideToast: (id)=>{\n            get().removeToast(id);\n        },\n        clearAllLoading: ()=>set({\n                globalLoading: false,\n                loadingStates: {},\n                loading: {}\n            }),\n        hasError: (key)=>{\n            const state = get();\n            return !!(state.errorStates[key] || state.globalError);\n        },\n        getError: (key)=>{\n            const state = get();\n            return state.errorStates[key] || state.globalError;\n        },\n        // Utility functions\n        isMobile: ()=>{\n            const state = get();\n            return state.viewport.isMobile;\n        },\n        isTablet: ()=>{\n            const state = get();\n            return state.viewport.isTablet;\n        },\n        isDesktop: ()=>{\n            const state = get();\n            return state.viewport.isDesktop;\n        },\n        getResponsiveValue: (values)=>{\n            const state = get();\n            if (state.viewport.isMobile) return values.mobile;\n            if (state.viewport.isTablet) return values.tablet;\n            return values.desktop;\n        },\n        resetUI: ()=>set({\n                layout: {\n                    sidebarOpen: false,\n                    headerHeight: 64,\n                    footerHeight: 48\n                },\n                sidebarOpen: false,\n                sidebarCollapsed: false,\n                headerHeight: 64,\n                footerHeight: 48,\n                theme: \"dark\",\n                systemTheme: \"light\",\n                actualTheme: \"dark\",\n                viewport: {\n                    width:  true ? window.innerWidth : 0,\n                    height:  true ? window.innerHeight : 0,\n                    isMobile: false,\n                    isTablet: false,\n                    isDesktop: true\n                },\n                preferences: defaultPreferences,\n                notifications: [],\n                unreadCount: 0,\n                modals: [],\n                toasts: [],\n                globalLoading: false,\n                loadingStates: {},\n                loading: {},\n                globalError: null,\n                errorStates: {},\n                errors: {},\n                currentStep: 1,\n                totalSteps: 1,\n                progress: 0\n            })\n    }), {\n    name: \"ui-store\",\n    partialize: (state)=>({\n            theme: state.theme,\n            preferences: state.preferences,\n            sidebarCollapsed: state.sidebarCollapsed\n        })\n}), {\n    name: \"ui-store\"\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/state/uiStore.ts\n"));

/***/ })

});