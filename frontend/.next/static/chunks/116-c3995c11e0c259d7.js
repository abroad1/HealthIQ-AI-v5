"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[116],{1875:function(e,s,t){t.d(s,{C:function(){return n}});var r=t(7437);function n(e){let{variant:s="default",className:t="",children:n,...a}=e;return(0,r.jsx)("div",{className:"".concat("inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"," ").concat({default:"bg-primary text-primary-foreground hover:bg-primary/80",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/80",outline:"text-foreground border border-input bg-background hover:bg-accent hover:text-accent-foreground"}[s]," ").concat(t),...a,children:n})}t(2265)},2595:function(e,s,t){t.d(s,{z:function(){return a}});var r=t(7437);t(2265);var n=t(5293);function a(e){let{variant:s="default",size:t="default",className:a="",children:o,asChild:i=!1,...l}=e,c=i?n.g7:"button",u="".concat("inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"," ").concat({default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"}[s]," ").concat({default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}[t]," ").concat(a);return(0,r.jsx)(c,{className:u,...l,children:o})}},4029:function(e,s,t){t.d(s,{Ol:function(){return a},SZ:function(){return l},Zb:function(){return n},aY:function(){return i},ll:function(){return o}});var r=t(7437);function n(e){let{className:s="",children:t,...n}=e;return(0,r.jsx)("div",{className:"rounded-lg border bg-card text-card-foreground shadow-sm ".concat(s),...n,children:t})}function a(e){let{className:s="",children:t,...n}=e;return(0,r.jsx)("div",{className:"flex flex-col space-y-1.5 p-6 ".concat(s),...n,children:t})}function o(e){let{className:s="",children:t,...n}=e;return(0,r.jsx)("h3",{className:"text-2xl font-semibold leading-none tracking-tight ".concat(s),...n,children:t})}function i(e){let{className:s="",children:t,...n}=e;return(0,r.jsx)("div",{className:"p-6 pt-0 ".concat(s),...n,children:t})}function l(e){let{className:s="",children:t,...n}=e;return(0,r.jsx)("p",{className:"text-sm text-muted-foreground ".concat(s),...n,children:t})}t(2265)},1236:function(e,s,t){t.d(s,{E:function(){return n}});var r=t(7437);function n(e){let{value:s,max:t=100,className:n="",...a}=e;return(0,r.jsx)("div",{className:"relative h-4 w-full overflow-hidden rounded-full bg-secondary ".concat(n),...a,children:(0,r.jsx)("div",{className:"h-full w-full flex-1 bg-primary transition-all",style:{transform:"translateX(-".concat(100-Math.min(Math.max(s/t*100,0),100),"%)")}})})}t(2265)},1098:function(e,s,t){t.d(s,{SP:function(){return l},dr:function(){return i},mQ:function(){return o},nU:function(){return c}});var r=t(7437),n=t(2265);let a=(0,n.createContext)(void 0);function o(e){let{value:s,onValueChange:t,children:n,className:o=""}=e;return(0,r.jsx)(a.Provider,{value:{value:s,onValueChange:t},children:(0,r.jsx)("div",{className:o,children:n})})}function i(e){let{children:s,className:t=""}=e;return(0,r.jsx)("div",{className:"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground ".concat(t),children:s})}function l(e){let{value:s,children:t,className:o=""}=e,i=(0,n.useContext)(a);if(!i)throw Error("TabsTrigger must be used within a Tabs component");let l=i.value===s;return(0,r.jsx)("button",{className:"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ".concat(l?"bg-background text-foreground shadow-sm":""," ").concat(o),onClick:()=>i.onValueChange(s),children:t})}function c(e){let{value:s,children:t,className:o=""}=e,i=(0,n.useContext)(a);if(!i)throw Error("TabsContent must be used within a Tabs component");return i.value!==s?null:(0,r.jsx)("div",{className:"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 ".concat(o),children:t})}},2430:function(e,s,t){t.d(s,{_:function(){return i}});var r=t(9625),n=t(6885);let a=t(5566).env.NEXT_PUBLIC_API_URL||"http://localhost:8000/api";class o{static async startAnalysis(e){try{let s=await fetch("".concat(a,"/analysis/start"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!s.ok){let e=await s.json().catch(()=>({}));throw Error(e.detail||"HTTP ".concat(s.status,": ").concat(s.statusText))}return{data:await s.json(),success:!0,message:"Analysis started successfully"}}catch(e){return{data:null,success:!1,error:e instanceof Error?e.message:"Failed to start analysis"}}}static async getAnalysisResult(e){try{let s=await fetch("".concat(a,"/analysis/result?analysis_id=").concat(encodeURIComponent(e)),{method:"GET",headers:{"Content-Type":"application/json"}});if(!s.ok){let e=await s.json().catch(()=>({}));throw Error(e.detail||"HTTP ".concat(s.status,": ").concat(s.statusText))}let t=await s.json();return{data:{analysis_id:t.analysis_id,result_version:t.result_version,biomarkers:t.biomarkers||[],clusters:t.clusters||[],insights:t.insights||[],recommendations:t.recommendations||[],overall_score:t.overall_score,meta:t.meta||{},created_at:t.created_at},success:!0,message:"Analysis result retrieved successfully"}}catch(e){return{data:null,success:!1,error:e instanceof Error?e.message:"Failed to get analysis result"}}}static subscribeToAnalysisEvents(e,s,t,r){let n=new EventSource("".concat(a,"/analysis/events?analysis_id=").concat(encodeURIComponent(e))),o=!1;return n.onmessage=e=>{try{JSON.parse(e.data),s(e)}catch(e){console.error("Failed to parse SSE event data:",e),null==t||t(e)}},n.onerror=e=>{console.error("SSE connection error:",e),o?console.log("SSE closed gracefully after completion"):null==t||t(e)},n.addEventListener("analysis_status",e=>{try{let t=JSON.parse(e.data);s(e),"complete"===t.phase&&(o=!0,n.close(),console.log("SSE closed gracefully after completion"),null==r||r())}catch(e){console.error("Failed to parse analysis_status event:",e),null==t||t(e)}}),n.addEventListener("complete",()=>{o=!0,n.close(),null==r||r()}),n}static validateBiomarkerData(e){let s=[];if(!e||"object"!=typeof e)return s.push("Biomarkers must be an object"),{valid:!1,errors:s};let t=Object.entries(e);for(let[e,r]of(0===t.length&&s.push("At least one biomarker is required"),t)){if(!r||"object"!=typeof r){s.push("Biomarker ".concat(e," must be an object"));continue}("number"!=typeof r.value||r.value<=0)&&s.push("Biomarker ".concat(e," must have a positive numeric value")),r.unit&&"string"==typeof r.unit||s.push("Biomarker ".concat(e," must have a valid unit"))}return{valid:0===s.length,errors:s}}static validateUserProfile(e){let s=[];return e&&"object"==typeof e?(("number"!=typeof e.age||e.age<0||e.age>150)&&s.push("Age must be a number between 0 and 150"),["male","female","other"].includes(e.sex)||s.push("Sex must be one of: male, female, other"),void 0!==e.weight&&("number"!=typeof e.weight||e.weight<=0)&&s.push("Weight must be a positive number if provided"),void 0!==e.height&&("number"!=typeof e.height||e.height<=0)&&s.push("Height must be a positive number if provided"),{valid:0===s.length,errors:s}):(s.push("User profile must be an object"),{valid:!1,errors:s})}static async getAnalysisHistory(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;try{let r=await fetch("".concat(a,"/analysis/history?user_id=").concat(encodeURIComponent(e),"&limit=").concat(s,"&offset=").concat(t),{method:"GET",headers:{"Content-Type":"application/json"}});if(!r.ok){let e=await r.json().catch(()=>({}));throw Error(e.detail||"HTTP ".concat(r.status,": ").concat(r.statusText))}return{data:await r.json(),success:!0,message:"Analysis history retrieved successfully"}}catch(e){return{data:{history:[],total:0,page:1,limit:s},success:!1,error:e instanceof Error?e.message:"Failed to get analysis history"}}}static async exportAnalysis(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"json",t=arguments.length>2?arguments[2]:void 0;try{let r=await fetch("".concat(a,"/analysis/export"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({analysis_id:e,format:s,user_id:t})});if(!r.ok){let e=await r.json().catch(()=>({}));throw Error(e.detail||"HTTP ".concat(r.status,": ").concat(r.statusText))}return{data:await r.json(),success:!0,message:"Export request created successfully"}}catch(e){return{data:{export_id:"",status:"failed"},success:!1,error:e instanceof Error?e.message:"Failed to export analysis"}}}static async cancelAnalysis(e){try{return{data:{cancelled:!0},success:!0,message:"Analysis cancelled successfully"}}catch(e){return{data:{cancelled:!1},success:!1,error:e instanceof Error?e.message:"Failed to cancel analysis"}}}}let i=(0,r.Ue)()((0,n.mW)((e,s)=>({currentAnalysis:null,currentAnalysisId:null,analysisHistory:[],isLoading:!1,error:null,currentPhase:"idle",progress:0,rawBiomarkers:{},normalizedBiomarkers:{},unmappedBiomarkers:[],userProfile:null,questionnaireResponses:{},questionnaireCompleted:!1,eventSource:null,setCurrentAnalysis:s=>e({currentAnalysis:s}),setCurrentAnalysisId:s=>e({currentAnalysisId:s}),addToHistory:s=>e(e=>({analysisHistory:[s,...e.analysisHistory.slice(0,49)]})),setLoading:s=>e({isLoading:s}),setError:s=>e({error:s}),setPhase:s=>e({currentPhase:s}),setProgress:s=>e({progress:Math.max(0,Math.min(100,s))}),setRawBiomarkers:s=>e({rawBiomarkers:s}),setNormalizedBiomarkers:s=>e({normalizedBiomarkers:s}),setUnmappedBiomarkers:s=>e({unmappedBiomarkers:s}),setUserProfile:s=>e({userProfile:s}),setQuestionnaireResponses:s=>e({questionnaireResponses:s}),setQuestionnaireCompleted:s=>e({questionnaireCompleted:s}),setResponse:(s,t)=>e(e=>({questionnaireResponses:{...e.questionnaireResponses,[s]:t}})),getResponse:e=>s().questionnaireResponses[e],resetResponses:()=>e({questionnaireResponses:{}}),startAnalysis:async t=>{let r=o.validateBiomarkerData(t.biomarkers),n=o.validateUserProfile(t.user);if(!r.valid||!n.valid){let s=[...r.errors,...n.errors];e({error:{message:"Validation failed: ".concat(s.join(", ")),code:"VALIDATION_ERROR",details:{biomarkerErrors:r.errors,userErrors:n.errors}},isLoading:!1,currentPhase:"idle"});return}e({isLoading:!0,error:null,currentPhase:"ingestion",progress:0,rawBiomarkers:t.biomarkers,userProfile:t.user,questionnaireResponses:t.questionnaire||{}});try{let r=await o.startAnalysis(t);if(!r.success)throw Error(r.error||"Failed to start analysis");let n=r.data.analysis_id,a={analysis_id:n,status:"pending",progress:0,created_at:new Date().toISOString()};e({currentAnalysis:a,currentAnalysisId:n,isLoading:!1,error:null,currentPhase:"ingestion",progress:0}),s().addToHistory(a);let i=o.subscribeToAnalysisEvents(n,e=>{try{let t=JSON.parse(e.data);console.log("SSE Event received:",t),t.phase&&"number"==typeof t.progress?(s().updateAnalysisProgress(n,t.progress,t.phase),"complete"===t.phase&&s().completeAnalysis(n,t.results)):"complete"===t.type||"complete"===t.phase?s().completeAnalysis(n,t.results):("error"===t.type||t.error)&&s().failAnalysis(n,{message:t.message||t.error||"Analysis failed",code:t.code||"ANALYSIS_ERROR",details:t.details})}catch(e){console.error("Failed to parse SSE event:",e)}},e=>{console.error("SSE connection error:",e);let t=s();"completed"!==t.currentPhase?s().failAnalysis(n,{message:"Connection lost during analysis",code:"CONNECTION_ERROR",details:e}):console.log("SSE error after completion - ignoring")},()=>{console.log("Analysis completed via SSE"),s().completeAnalysis(n,null)});e({eventSource:i})}catch(s){e({error:{message:s instanceof Error?s.message:"Failed to start analysis",code:"API_ERROR",details:s},isLoading:!1,currentPhase:"idle"})}},updateAnalysisProgress:(t,r,n)=>{var a;let o=s();(null===(a=o.currentAnalysis)||void 0===a?void 0:a.analysis_id)===t&&e({currentAnalysis:{...o.currentAnalysis,status:"processing",progress:r},progress:r,currentPhase:n})},completeAnalysis:async(t,r)=>{var n;let a=s();if((null===(n=a.currentAnalysis)||void 0===n?void 0:n.analysis_id)===t)try{let n=await o.getAnalysisResult(t);if(n&&n.success&&n.data){let t={...a.currentAnalysis,...n.data,completed_at:new Date().toISOString()};e({currentAnalysis:t,isLoading:!1,currentPhase:"completed",progress:100,error:null}),s().addToHistory(t)}else{let t={...a.currentAnalysis,status:"completed",progress:100,results:r||{biomarkers:[],clusters:[],insights:[],risk_assessment:{},recommendations:[]},completed_at:new Date().toISOString()};e({currentAnalysis:t,isLoading:!1,currentPhase:"completed",progress:100,error:null}),s().addToHistory(t)}}catch(n){console.error("Failed to fetch analysis results:",n);let t={...a.currentAnalysis,status:"completed",progress:100,results:r||{biomarkers:[],clusters:[],insights:[],risk_assessment:{},recommendations:[]},completed_at:new Date().toISOString()};e({currentAnalysis:t,isLoading:!1,currentPhase:"completed",progress:100,error:null}),s().addToHistory(t)}else e({isLoading:!1,currentPhase:"completed",progress:100,error:null})},failAnalysis:(t,r)=>{var n;let a=s();if((null===(n=a.currentAnalysis)||void 0===n?void 0:n.analysis_id)===t){let t={...a.currentAnalysis,status:"failed",completed_at:new Date().toISOString()};e({currentAnalysis:t,isLoading:!1,currentPhase:"error",error:r}),s().addToHistory(t)}else e({isLoading:!1,currentPhase:"error",error:r})},clearAnalysis:()=>{let t=s();t.eventSource&&t.eventSource.close(),e({currentAnalysis:null,currentAnalysisId:null,isLoading:!1,error:null,currentPhase:"idle",progress:0,rawBiomarkers:{},normalizedBiomarkers:{},unmappedBiomarkers:[],questionnaireResponses:{},questionnaireCompleted:!1,eventSource:null})},retryAnalysis:()=>{let e=s();if(e.currentAnalysis&&e.userProfile){let t={biomarkers:e.rawBiomarkers,user:e.userProfile,questionnaire:e.questionnaireResponses};s().startAnalysis(t)}},getAnalysisById:e=>s().analysisHistory.find(s=>s.analysis_id===e),getRecentAnalyses:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10;return s().analysisHistory.slice(0,e)},isAnalysisComplete:()=>{var e;return(null===(e=s().currentAnalysis)||void 0===e?void 0:e.status)==="completed"},getAnalysisSummary:()=>{let e=s().analysisHistory,t=e.filter(e=>"completed"===e.status),r=e.filter(e=>"failed"===e.status),n=t.map(e=>{var s;return null===(s=e.results)||void 0===s?void 0:s.overall_score}).filter(e=>"number"==typeof e);return{totalAnalyses:e.length,completedAnalyses:t.length,failedAnalyses:r.length,averageScore:n.length>0?n.reduce((e,s)=>e+s,0)/n.length:0}}}),{name:"analysis-store"}))}}]);